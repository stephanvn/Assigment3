<?xml version="1.0"?>
<patternselector>
	<pattern>
		<name>Factory Method</name>
		<context>•The client does not need to know every subclass of objects it must create. It
		only need one reference to the abstract class/interface and the factory
		object.
		•The factory encapsulate the creation of objects. This can be useful if the
		creation process is very complex.
		</context>
		<problem>When a class can't anticipate which kind of class of object it must create.
		•You want to localize the knowledge of which class gets created.
		•When you have classes that is derived from the same subclasses, or they
		may in fact be unrelated classes that just share the same interface. Either
		way, the methods in these class instances are the same and can be used
		interchangeably.
		•When you want to insulate the client from the actual type that is being
		instantiated.
		</problem>
		<solution>The Factory pattern provides a way to use an instance as a object factory.
		The factory can return an instance of one of several possible classes (in a
		subclass hierarchy), depending on the data provided to it.
		</solution>
		<diagram>http://www.apwebco.com/images/FactoryMethodDetailed.png</diagram>
		<consequences>There is no way to change an implementing class without a recompile.</consequences>
		<purpose>Creational</purpose>
		<scope>Class</scope>
	</pattern>
	<pattern>
		<name>Adapter(class)</name>
		<context>•Highly class reusable.
		•Introduces only one object</context>
		<problem>•When you want to use an existing class, and its interface does not match
		the one you need.
		•When you want to create a reusable class that cooperates with unrelated or
		unforeseen classes, that is, classes that don't necessarily have compatible
		interfaces.
		•When you want to increase transparency of classes.
		•When you want to make a pluggable kit.
		</problem>
		<solution>The Adapter pattern is used to translate the interface of one class into
		another interface. This means that we can make classes work together that
		couldn't otherwise because of incompatible interfaces. A class adapter uses
		multiple inheritance (by extending one class and/or implementing one or
		more classes) to adapt one interface to another. An object adapter relies on
		object aggregation.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/adapter.gif</diagram>
		<consequences>When using Java, Target must be an interface.</consequences>
		<purpose>Structural</purpose>
		<scope>Class</scope>
	</pattern>
	<pattern>
		<name>Interpreter</name>
		<context>•Different types of output can be generated</context>
		<problem>•When you want to write a program with different types of output</problem>
		<solution>The Interpreter pattern writes an foreign language to an understandable language</solution>
		<diagram>http://upload.wikimedia.org/wikipedia/en/0/03/Interpreter_UML_class_diagram.jpg</diagram>
		<consequences>•Not efficient
		•Requires extensive error checking</consequences>
		<purpose>Behavioral</purpose>
		<scope>Class</scope>
	</pattern>
	<pattern>
		<name>Template method</name>
		<context>•Define the skeleton of an algorithm in an operation, deferring some steps to client subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.
		•Base class declares algorithm 'placeholders', and derived classes implement the placeholders.</context>
		<problem>Two different components have significant similarities, but demonstrate no reuse of common interface or implementation. If a change common to both components becomes necessary, duplicate effort must be expended.</problem>
		<solution>AbstractClass - defines abstract primitive operations that concrete subclasses define to implement steps of an algorithm.
		- implements a template method which defines the skeleton of an algorithm. The template method calls primitive operations as well as operations defined in AbstractClass or those of other objects.
		ConcreteClass - implements the primitive operations to carry out subclass-specific steps of the algorithm.
		When a concrete class is called the template method code will be executed from the base class while for each method used inside the template method will be called the implementation from the derived class.</solution>
		<diagram>http://www.oodesign.com/images/design_patterns/behavioral/template_method_implementation_-_uml_class_diagram.gif</diagram>
		<consequences>• The connection to commonality/variability thinking is obvious
		• Template Method is used prominently in frameworks. </consequences>
		<purpose>Behavioral</purpose>
		<scope>Class</scope>
	</pattern>
	<pattern>
		<name>Abstract Factory</name>
		<context>Use of this pattern makes it possible to interchange concrete classes without
		changing the code that uses them, even at runtime.
		</context>
		<problem>The pattern can be used where we need to create sets of objects that share a
		common theme and where the client only needs to know how to handle the
		abstract equivalence of these objects, i.e. the implementation is not
		important for the client. The Abstract Factory is often employed when there
		is a need to use different sets of objects and where the objects could be
		added or changed some time during the lifetime of an application</problem>
		<solution>The Abstract Factory pattern is a creational pattern which is related to the
		Factory Method pattern, but it adds another level of abstraction. What this
		means is that the pattern encapsulates a group of individual concrete factory
		classes (as opposed to concrete factory methods which are derived in
		subclasses) which share common interfaces. The client software uses the
		Abstract Factory which provides an interface for creating families of related
		or dependent objects without specifying their concrete classes. This pattern
		separates the implementation details of a set of objects from its general
		usage.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/abstract.gif</diagram>
		<consequences>As with similar design patterns, one of the main drawbacks is the possibility
		of unnecessary complexity and extra work in the initial writing of the code</consequences>
		<purpose>Creational</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Builder</name>
		<context>•The built object is shielded from the details of its construction.
		•Code for construction is isolated from code for representation and both are
		easy to replace without affecting the other.
		•Gives you control over the construction process.
		•Gives you the possibility to reuse and/or change the process and/or product
		independently</context>
		<problem>•When the algorithm for creating a complex object should be independent of
		the parts that make up the object and how they are assembled.
		•When the construction process must allow different representations for the
		object that is constructed.
		•When you want to insulate clients from the knowledge of the actual
		creation process and/or resulting product.</problem>
		<solution>The Builder pattern can be used to ease the construction of a complex object
		from simple objects. The Builder pattern also separates the construction of a
		complex object from its representation so that the same construction process
		can be used to create another composition of objects.
		Related patterns include Abstract Factory and Composite.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/builder.gif</diagram>
		<consequences>Need flexibility in creating various complex objects. Need to create complex,
		aggregate objects
		</consequences>
		<purpose>Creational</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Prototype</name>
		<context>•Speeds up instantiation of large, dynamically loaded classes.
		•Reduced subclassing.</context>
		<problem>•When a system needs to be independent of how its objects are created,
		composed, and represented.
		•When adding and removing objects at runtime.
		•When specifying new objects by changing an existing objects structure.
		•When configuring an application with classes dynamically.
		•When keeping trying to keep the number of classes in a system to a
		minimum.
		•When state population is an expensive or exclusive process.
		</problem>
		<solution>The Prototype pattern is basically the creation of new instances through
		cloning existing instances. By creating a prototype, new objects are created
		by copying this prototype.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/prototype.gif</diagram>
		<consequences>Each subclass of Prototype must implement the Clone operation. Could be
		difficult with existing classes with internal objects with circular references or
		which does not support copying.
		</consequences>
		<purpose>Creational</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Singleton</name>
		<context>•Controlled access to unique instance.
		•Reduced name space.
		•Allows refinement of operations and representations</context>
		<problem>When only one instance or a specific number of instances of a class are
		allowed. Facade objects are often Singletons because only one Facade object	is required.
		</problem>
		<solution>The Singleton pattern provides the possibility to control the number of
		instances (mostly one) that are allowed to be made. We also receive a global
		point of access to it (them).
		</solution>
		<diagram>http://images.techhive.com/images/idge/imported/article/jvw/2003/04/jw-0425-designpatterns1-100156690-orig.jpg</diagram>
		<consequences>Singleton pattern is also considered an anti-pattern by some people, who feel
		that it is overused, introducing unnecessary limitations in situations where a
		sole instance of a class is not actually required.</consequences>
		<purpose>Creational</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Adapter(object)</name>
		<context>•Highly class reusable.
		•Introduces only one object</context>
		<problem>•When you want to use an existing class, and its interface does not match
		the one you need.
		•When you want to create a reusable class that cooperates with unrelated or
		unforeseen classes, that is, classes that don't necessarily have compatible
		interfaces.
		•When you want to increase transparency of classes.
		•When you want to make a pluggable kit.
		</problem>
		<solution>The Adapter pattern is used to translate the interface of one class into
		another interface. This means that we can make classes work together that
		couldn't otherwise because of incompatible interfaces. A class adapter uses
		multiple inheritance (by extending one class and/or implementing one or
		more classes) to adapt one interface to another. An object adapter relies on
		object aggregation.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/adapter.gif</diagram>
		<consequences>When using Java, Target must be an interface.</consequences>
		<purpose>Structural</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Bridge</name>
		<context>Implementation can be selected or switched at run-time. The abstraction and
		implementation can be independently extended or composed.</context>
		<problem>•When you want to separate the abstract structure and its concrete
		implementation.
		•When you want to share an implementation among multiple objects,
		•When you want to reuse existing resources in an 'easy to extend' fashion.
		•When you want to hide implementation details from clients. Changes in
		implementation should have no impact on clients.
		</problem>
		<solution>Decouple an abstraction or interface from its implementation so that the two
		can vary independently.
		Bridge makes a clear-cut between abstraction and implementation.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/bridge.gif</diagram>
		<consequences>Double indirection - In the example, methods are implemented by subclasses
		of DrawingAPI class. Shape class must delegate the message to a DrawingAPI
		subclass which implements the appropriate method. This will have a slight
		impact on performance</consequences>
		<purpose>Structural</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Composite</name>
		<context>•Define class hierarchies consisting of primitive objects and composite
		objects.
		•Makes it easier to add new kind of components</context>
		<problem>•When you want to represent a part-whole relationship in a tree structure.
		•When you want clients to be able to ignore the differences between
		compositions of objects and individual objects.
		•When the structure can have any level of complexity and is dynamic.
		</problem>
		<solution>The Composite pattern helps you to create tree structures of objects without
		the need to force clients to differentiate between branches and leaves
		regarding usage. The Composite pattern lets clients treat individual objects
		and compositions of objects uniformly.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/composite.gif</diagram>
		<consequences>The Composite pattern makes it easy for you to add new kinds of components
		to your collection as long as they support a similar programming interface. On
		the other hand, this has the disadvantage of making your system overly
		general. You might find it harder to restrict certain classes where this would
		normally be desirable.
		</consequences>
		<purpose>Structural</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Decorator</name>
		<context>•More flexibility than static inheritance.
		•Avoids feature-laden classes high up in the hierarchy.
		•Simplifies coding because you write a series of classes each targeted at a
		specific part of the functionality rather than
		•coding all behavior into the object.
		•Enhances the object's extensibility because you make changes by coding
		new classes.
		</context>
		<problem>Where to use
		•When you want to add responsibilities to individual objects dynamically and
		transparently, without affecting the original object or other objects.
		•When you want to add responsibilities to the object that you might want to
		change in the future.
		•When extension by static subclassing is impractical.
		</problem>
		<solution>The Decorator pattern lets you attach additional responsibilities and modify
		an instance functionality dynamically. Decorators provide a flexible
		alternative to subclassing for extending functionality, using composition
		instead of inheritance.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/decorator.gif</diagram>
		<consequences>One thing to keep in mind when implementing the Decorator pattern is that
		you need to keep the component interface simple. You want to avoid making
		the component interface overly complex, because a complex interface will
		make it that much harder to get each decorator right.
		Another potential drawback of the Decorator pattern is the performance
		overhead associated with a long chain of decorators.
		</consequences>
		<purpose>Structural</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Facade</name>
		<context>The main benefit with the Facade pattern is that we can combine very
		complex method calls and code blocks into a single method that performs a
		complex and recurring task. Besides making code easier to use and
		understand, it reduces code dependencies between libraries or packages,
		making programmers more apt to consideration before writing new code that
		exposes the inner workings of a library or a package. Also, since the Facade
		makes a weak coupling between the client code and other packages or
		libraries it allows us vary the internal components since the client does not
		call them directly.
		</context>
		<problem>The Facade can be used to make a software library easier to use and
		understand, since the Facade has convenient methods for common tasks. For
		the same reason, it can make code that uses the library more readable. The
		pattern can also be used to reduce dependencies of outside code on the
		inner workings of a library, since most code uses the Facade it allows more
		flexibility when developing the system. A final usage scenario is where we
		can wrap several poorly-designed APIs with a single well-designed API.
		</problem>
		<solution>This design pattern provides a unified interface to a set of interfaces in a
		subsystem. It defines a higher-level interface that makes the subsystem
		easier to use. A facade is an object that provides a simplified interface to a
		larger body of code, such as a class library.</solution>
		<diagram>http://images.techhive.com/images/idge/imported/article/jvw/2003/05/jw-0530-designpatterns1-100156719-orig.jpg</diagram>
		<consequences>One drawback is that we have much less control of what goes on beyond the
		surface. Also, if some classes require small variations to the implementation
		of Facade methods, we might end up with a mess.</consequences>
		<purpose>Structural</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Flyweight</name>
		<context>Reduce the number of objects created, decrease memory footprint and
		increase performance.
		</context>
		<problem>•When there is a very large number of objects that may not fit in memory.
		•When most of an objects state can be stored on disk or calculated at
		runtime.
		•When there are groups of objects that share state.
		•When the remaining state can be factored into a much smaller number of
		objects with shared state.
		</problem>
		<solution>The Flyweight pattern provides a mechanism by which you can avoid creating
		a large number of 'expensive' objects and instead reuse existing instances to
		represent new ones.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/flyweight.gif</diagram>
		<consequences>Designing objects down to the lowest levels of system "granularity" provides
		optimal flexibility, but can be unacceptably expensive in terms of
		performance and memory usage.
		</consequences>
		<purpose>Structural</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Proxy</name>
		<context>Gives the ability to control access to an object, whether it's because of a
		costly creation process of that object or security issues.
		</context>
		<problem>•When the creation of one object is relatively expensive it can be a good
		idea to replace it with a proxy that can make sure that instantiation of the
		expensive object is kept to a minimum.
		•Proxy pattern implementation allows for login and authority checking before
		one reaches the actual object that's requested.
		•Can provide a local representation for an object in a remote location.
		</problem>
		<solution>A Proxy is a structural pattern that provides a stand-in for another object in
		order to control access to it.</solution>
		<diagram>http://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Proxy_pattern_diagram.svg/400px-Proxy_pattern_diagram.svg.png</diagram>
		<consequences>Introduces another abstraction level for an object, if some objects accesses
		the target object directly and another via the proxy there is a chance that
		they get different behavior this may or may not be the intention of the
		creator.
		</consequences>
		<purpose>Structural</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Chain of Responsibility</name>
		<context>•It reduces coupling.
		•It increases the flexibility of handling a request.
		</context>
		<problem>•When more than one object may handle a request, and the handler isn't
		known.
		•When you want to issue a request to one of several objects without
		specifying the receiver explicitly.
		•When the set of objects that can handle a request should be specified
		dynamically
		</problem>
		<solution>The Chain-of-responsibility pattern lets more than one object handle a
		request without mutual knowledge. We avoid coupling between the sender of
		a request and the possible receivers. We place all receivers in a chain which
		lets the receiving objects pass the request along to the next receiver in the
		chain until one receiver handles it, or the end of the chain is reached.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/chain.gif</diagram>
		<consequences>Reception isn't guaranteed since a request has no explicit receiver, there's no
		guarantee it will be handled unless the chain is configured
		properly.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Command</name>
		<context>• A command object is a possible storage for procedure parameters. It can be
		used while assembling the parameters for a function call and allows the
		command to be set aside for later use.
		• A class is a suitable place to collect code and data related to a specific
		action or event.
		•It allows the reaction to a command to be executed some time after it has
		occurred.
		•Command objects enables data structures containing multiple commands.
		•Command objects supports undo-able operations, provided that the
		command objects are stored (for example in a linked list).
		</context>
		<problem>• Where you want a action that can be represented in many ways, like dropdown
		menu, buttons and popup menu.
		• To create undo/redo functionality.
		</problem>
		<solution>The Command pattern is used to create objects that represents actions and
		events in an application. A command object encapsulates an action or event
		and contains all information required to understand exactly what has
		happened. By passing the command object as a parameter we can, anywhere
		needed extract information about occurred actions and events.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/command.gif</diagram>
		<consequences>The main disadvantage of the Command pattern seems to be a proliferation
		of little classes that clutter up the program. However, even in the case
		where we have separate click events, we usually call little private methods
		to carry out the actual function. It turns out that these private methods are
		just about as long as our little classes, so there is frequently little difference in complexity between building the Command classes and just writing more
		methods. The main difference is that the Command pattern produces little
		classes that are much more readable.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Iterator</name>
		<context>•The same iterator can be used for different aggregates.
		•Allows you to traverse the aggregate in different ways depending on your
		needs.
		•It encapsulates the internal structure of how the iteration occurs.
		•Don't need to bloat the your class with operations for different traversals.
		</context>
		<problem>Use to access the elements of an aggregate object sequentially.
		Java's collections like ArrayList and HashMap have implemented the iterator
		pattern.
		</problem>
		<solution>The Iterator design pattern provides a way to access the elements of an
		aggregate object sequentially without exposing its underlying
		representation.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/iterator.gif</diagram>
		<consequences>Not thread safe unless its a robust iterator that allows insertions and
		deletions. This can be be solved by letting the Iterator use a Memento to
		capture the state of an iteration.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Mediator</name>
		<context>•Limited subclassing, since a mediator localizes behavior that otherwise
		would be distributed among several objects. Changing some behavior
		requires us to subclass only the mediator.
		•Colleagues become decoupled which allows us to vary and reuse colleague
		and mediator classes independently.
		•A mediator simplifies object protocols since it replaces many-to-many
		interactions with one-to-many interactions between the mediator and its
		colleagues. One-to-many interactions are easier to understand, maintain,
		and extend.
		•The mediator abstracts object cooperation. The mediator lets you focus
		on how objects interact apart from their individual behaviors which can help
		clarify how objects interact in a system.
		•Centralized control is achieved by trading complexity of interaction for
		complexity in the mediator. A mediator encapsulates protocols and can
		become more complex than any individual colleague. This can make the
		mediator itself a very complex and large piece of code that is hard to
		maintain.
		</context>
		<problem>The Mediator pattern can be used when a set of objects communicate in
		well-specified but complex ways and the resulting interdependencies are
		unstructured and hard to grasp. If it is difficult to reuse an object because it
		refers to and communicates with many other objects this pattern is a good
		solution. Communicating objects' identities will be protected when using the
		Mediator pattern which is good when security is important. Also, if you like
		to customize some behavior which is spread out between several classes
		without a lot of subclassing this pattern should be applied. The pattern is
		used in many modern systems that reflect a send/receive protocol, such as
		list servers and chat rooms. Another area of use is graphical user interfaces,
		where the mediator can encapsulate a collective behavior to control and
		coordinate the interactions of a group of GUI widgets. The mediator serves
		as an intermediary that keeps objects in the group from referring to each
		other explicitly. The objects only know the mediator which reduces the
		number of interconnections.
		</problem>
		<solution>With the mediator pattern communication between objects is encapsulated
		with a mediator object. Objects no longer communicate directly with each
		other, but instead communicate through the mediator. This results in a more
		cohesive implementation of the logic and decreased coupling between the
		other objects.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/mediator.gif</diagram>
		<consequences>Besides the benefits and drawbacks described above, one important
		drawback is that the Mediator pattern can have a performance impact on a
		system. Since all communication must go through the mediator, it can
		become a bottleneck.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Memento</name>
		<context>Ability to restore an object to its previous state
		</context>
		<problem>•When letting some info in an object be available by another object.
		•When you want to create snapshots of a state for an object.
		•When you need undo/redo features.
		</problem>
		<solution>To record an object internal state without violating encapsulation and
		reclaim it later without knowledge of the original object. A memento is an
		object that stores a snapshot of the internal state of another object.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/memento.gif</diagram>
		<consequences>Care should be taken if the originator may change other objects or resources
		- the memento pattern operates on a single object. Using memento to store
		large amounts of data from Originator might be expensive if clients create
		and return mementos frequently.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Observer</name>
		<context>Makes for a loose coupling between publisher and subscriber as the publisher
		does not need to know who or how many subscribers there will be.
		</context>
		<problem>When an object wants to publish information and many objects will need to
		receive that information.
		</problem>
		<solution>An observer is a structural pattern that enables publish/subscribe
		functionality. This is accomplished by an autonomous object, publisher that
		allows other objects to attach or detach their subscription as they like. The
		pattern does not impose any limit to the number of observers that can
		attach, or subscribe, themselves for notification on future changes in the
		publisher's state.</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/observer.gif</diagram>
		<consequences>In a complex scenario there may be problems to determining whether the
		update to the publisher is of relevance to all subscribers or just some of
		them. Sending an update signal to all subscribers might impose a
		communication overhead of not needed information.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>State</name>
		<context>•Cleaner code when each state is a class instead.
		•Use a class to represent a state, not a constant.
		</context>
		<problem>•When we need to define a "context" class to present a single interface to
		the outside world. By defining a State abstract base class.
		•When we want to represent different "states" of a state machine as derived
		classes of the State base class.
		</problem>
		<solution>The State pattern allows an object to alter its behavior when its internal
		state changes. By using inheritance and letting subclasses represent different
		states and functionality we can switch during runtime. This is a clean way for
		an object to partially change its type at runtime.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/state.gif</diagram>
		<consequences>•Generates a number of small class objects, but in the process, simplifies
		and clarifies the program.
		•Eliminates the necessity for a set of long, look-alike conditional statements
		scattered throughout the code.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Strategy</name>
		<context>•Reduces multiple conditional statements in a client.
		•Hides complex, algorithmic-specific data from the client.
		•Provides an alternative to subclassing.
		•Can be used to hide data that an algorithm uses that clients shouldn't know
		about.
		</context>
		<problem>•When you need to use one of several algorithms dynamically.
		•When you want to configure a class with one of many related classes
		(behaviors).
		•When an algorithm uses data that clients shouldn't know about.
		</problem>
		<solution>Use strategy when you need to define a family of algorithms, encapsulate
		each one, and make them interchangeable. Strategy lets the algorithm vary
		independently from clients that use it. Related patterns include State,
		Flyweight, Decorator, Composite.
		</solution>
		<diagram>http://www.dofactory.com/images/diagrams/net/strategy.gif</diagram>
		<consequences>•Clients must be aware of different strategies. A client must understand how
		strategies differ before it can select the appropriate one.
		•Increases the number of objects in an application.
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
	<pattern>
		<name>Visitor</name>
		<context>•Represents an operation to be performed on the elements of an object structure.
		•Visitor lets you define a new operation without changing the classes of the elements on which it operates.
		</context>
		<problem>Many distinct and unrelated operations need to be performed on node objects in a heterogeneous aggregate structure. You want to avoid "polluting" the node classes with these operations. And, you don't want to have to query the type of each node and cast the pointer to the correct type before performing the desired operation.
		</problem>
		<solution>The visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying those structures. It is one way to follow the open/closed principle.</solution>
		<diagram>http://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/VisitorDiagram.svg/300px-VisitorDiagram.svg.png</diagram>
		<consequences>Not efficient
		</consequences>
		<purpose>Behavioral</purpose>
		<scope>Object</scope>
	</pattern>
</patternselector>